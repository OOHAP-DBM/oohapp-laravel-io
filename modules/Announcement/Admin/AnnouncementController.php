<?php
namespace Modules\Announcement\Admin;

use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use App\User;
use Modules\AdminController;
use Modules\Announcement\Models\Announcement;
use Modules\Announcement\Events\AnnouncementCreatedEvent;
use Propaganistas\LaravelPhone\PhoneNumber;
use Illuminate\Support\Facades\Log;
use Modules\User\Models\Role;
use Modules\Sms\Core\Facade\Sms;

class AnnouncementController extends AdminController
{
    public function __construct()
    {
        $this->setActiveMenu(route('announcement.admin.index'));
    }
    public function callAction($method, $parameters)
    {
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $this->checkPermission('announcement_view');

        $query = Announcement::query() ;

        $query->orderBy('id', 'desc');
        if (!empty($announcement_name = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $announcement_name . '%');
            // $query->orWhere('code',   $announcement_name );
        }

        $data = [
            'rows'               => $query->paginate(20),
            'breadcrumbs'        => [
                [
                    'name'  => __('Announcement Management'),
                    'class' => 'active'
                ],
            ],
            'page_title'=>__("Announcement Management"),
        ];
        return view('Announcement::admin.index', $data);
    }

    public function edit(Request $request,$id)
    {
        $this->checkPermission('announcement_update');

        $row = Announcement::find($id);
        if (empty($row)) {
            return redirect(route('announcement.admin.index'));
        }

        $data = [
            'row'            => $row,
            'roles'          => Role::get(),
            'breadcrumbs'    => [
                [
                    'name' => __('All Announcements'),
                    'url'  => route('announcement.admin.index')
                ],
                [
                    'name' => __('Edit Announcement: :name',['name'=>$row->title]),
                ],
            ],
            'page_title'=>__("Edit: :name",['name'=>$row->title]),
        ];
        return view('Announcement::admin.detail', $data);
    }

    public function create(Request $request)
    {
        $this->checkPermission('announcement_create');

        $row = new Announcement();
        $data = [
            'row'            => $row,
            'roles'          => Role::get(),
            'breadcrumbs'    => [
                [
                    'name' => __('All Announcements'),
                    'url'  => route('announcement.admin.index')
                ],
                [
                    'name' => __('Create Announcement'),
                ],
            ],
            'page_title'=>__('Create Announcement'),
        ];
        return view('Announcement::admin.detail', $data);
    }

    public function store( Request $request,$id ){

        $request->validate([
            'content'=>['required'],
            'via'=>['required'],
            'user_type'=>['required'],
        ]);

        if($id>0){
            $this->checkPermission('announcement_update');
            $row = Announcement::find($id);
            if (empty($row)) {
                return redirect(route('announcement.admin.index'));
            }

        }else{
            $this->checkPermission('announcement_create');
            $row = new Announcement();
            $row->status = "publish";
        }

        $dataKeys = [
            'title',
            'content',
            'status',
            'user_type',
            'only_for_user',
            'role_id', 
            'via', 
            'date', 
            'image_id'
        ];

        $row->fillByAttr($dataKeys,$request->input());

        // Conditional logic for `user_type`
        if ($row->user_type === 'user') {
            $row->role_id = null; // Clear role_id if user_type is user
        } elseif ($row->user_type === 'role') {
            $row->only_for_user = null; // Clear only_for_user if user_type is role
        }

        // Conditional logic for `via`
        if ($row->via != 'email') {
            $row->title = null; // Clear title if email is not selected
            $row->image_id = null; // Clear image_id if email is not selected
        }

        $res = $row->save();

        if ($res) {
            if($row->user_type == 'user'){
                if(!empty($row->only_for_user)){
                    foreach ($row->only_for_user as $key => $value) {
                        if ($row->via == 'email') {
                            Announcement::sendAnnouncementEmails($value, $row);
                        }
                        if ($row->via == 'sms') {
                            try {
                                $user = User::find($value);
                                $to = (string)PhoneNumber::make($user->phone)->ofCountry($user->country);
                                Sms::to($to)->content($row->content)->send();
                            } catch (\Exception $e) {
                                Log::error($e);
                            }
                        }
                        if ($row->via == 'onsite') {
                            $row->user_id = $value;
                            event(new AnnouncementCreatedEvent($row));
                        }
                    }
                }
            }

            else if($row->user_type == 'role'){
                $users = User::where('status','publish')->where('role_id', $row->role_id)->pluck('id');
                if(!empty($users)){
                    foreach ($users as $user_id) {
                        if ($row->via == 'email') {
                            Announcement::sendAnnouncementEmails($user_id, $row);
                        }
                        if ($row->via == 'sms') {
                            try {
                                $user = User::find($user_id);
                                $to = (string)PhoneNumber::make($user->phone)->ofCountry($user->country);
                                Sms::to($to)->content($row->content)->send();
                            } catch (\Exception $e) {
                                Log::error($e->getMessage());
                            }
                        }
                        if ($row->via == 'onsite') {
                            $row->user_id = $user_id;
                            event(new AnnouncementCreatedEvent($row));
                        }
                    }
                }
            }

            if($id > 0 ){
                return redirect()->back()->with('success',  __('Announcement updated') );
            }else{
                return redirect()->to(route('announcement.admin.index'))->with('success',  __('Announcement created') );
            }
        }
    }

    public function bulkEdit(Request $request)
    {
        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        switch ($action){
            case "delete":
                foreach ($ids as $id) {
                    $query = Announcement::query()->where("id", $id);
                    $this->checkPermission('announcement_delete');
                    $query->first();
                    if(!empty($query)){
                        $query->delete();
                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "clone":
                $this->checkPermission('announcement_create');
                foreach ($ids as $id) {
                    (new Announcement())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = Announcement::query()->where("id", $id);
                    $this->checkPermission('announcement_update');
                    $query->update(['status' => $action]);
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }
    }

    function getServiceForSelect2(Request $request){
        $q = $request->query('q');
        $query = Service::select('*');
        if ($q) {
            $query->where(function ($query) use ($q) {
                $query->where('title', 'like', '%' . $q . '%')
                    ->orWhere('id', $q);
            });
        }
        $res = $query->orderBy('id', 'desc')->orderBy('title', 'asc')->limit(20)->get();
        $data = [];
        if (!empty($res)) {
            foreach ($res as $item) {
                $data[] = [
                    'id'   => $item->id,
                    'text' => strtoupper($item->object_model)." (#{$item->object_id}): {$item->title}",
                ];
            }
        }
        return response()->json([
            'results' => $data
        ]);
    }
}
