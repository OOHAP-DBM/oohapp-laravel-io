<?php
namespace Modules\Api\Controllers;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Modules\Core\Models\Attributes;
use Modules\Location\Models\Location;
use Modules\Location\Models\LocationCategory;
use Modules\Space\Models\Space;

class SpaceController extends Controller
{
    protected $spaceClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct()
    {
        $this->spaceClass = Space::class;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }

    public function callAction($method, $parameters)
    {
        if(!Space::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    // public function search(Request $request){
    //     $model_News = Space::query()->select("bravo_spaces.*");
    //     $model_News->where('status','publish')->latest();
    //     if (!empty($search = $request->query("s"))) {
    //         $model_News->where(function($query) use ($search) {
    //             $query->where('bravo_spaces.title', 'LIKE', '%' . $search . '%');
    //             $query->orWhere('bravo_spaces.content', 'LIKE', '%' . $search . '%');
    //         });

    //         if( setting_item('site_enable_multi_lang') && setting_item('site_locale') != app_get_locale() ){
    //             $model_News->leftJoin('bravo_spaces_translations', function ($join) use ($search) {
    //                 $join->on('bravo_spaces.id', '=', 'bravo_spaces.origin_id');
    //             });
    //             $model_News->orWhere(function($query) use ($search) {
    //                 $query->where('bravo_spaces_translations.title', 'LIKE', '%' . $search . '%');
    //                 $query->orWhere('bravo_spaces_translations.content', 'LIKE', '%' . $search . '%');
    //             });
    //         }
    //     }
    //     // if($cat_id = $request->query('cat_id')){
    //     //     $model_News->where('cat_id',$cat_id);
    //     // }
    //     $rows = $model_News->with("author")->with('translation')->paginate(10);
    //     $total = $rows->total();
    //     return $this->sendSuccess(
    //         [
    //             'total'=>$total,
    //             'total_pages'=>$rows->lastPage(),
    //             'data'=>$rows->map(function($row){
    //                 return $row->dataForApi();
    //             }),
    //         ]
    //     );
    // }
  



    //other search
  public function search(Request $request)
    {
       
        // search code 
        if (!empty($search = $request->query("s"))) {
            $model_News = Space::query()->select("bravo_spaces.*");
            $model_News->where('status', 'publish')->latest();

            $model_News->where(function ($query) use ($search) {
                $query->where('bravo_spaces.title', 'LIKE', '%' . $search . '%');
                $query->orWhere('bravo_spaces.content', 'LIKE', '%' . $search . '%');
            });

            if (setting_item('site_enable_multi_lang') && setting_item('site_locale') != app_get_locale()) {
                $model_News->leftJoin('bravo_spaces_translations', function ($join) use ($search) {
                    $join->on('bravo_spaces.id', '=', 'bravo_spaces.origin_id');
                });
                $model_News->orWhere(function ($query) use ($search) {
                    $query->where('bravo_spaces_translations.title', 'LIKE', '%' . $search . '%');
                    $query->orWhere('bravo_spaces_translations.content', 'LIKE', '%' . $search . '%');
                });
            }

            $rows = $model_News->with('translation')->paginate(10);
            $total = $rows->total();
            return $this->sendSuccess(
                [
                    'total' => $total,
                    'total_pages' => $rows->lastPage(),
                    'data' => $rows->map(function ($row) {
                        return $row->dataForApi();
                    }),
                ]
            );
        }

      else{

        if(!empty($request->all())){
           $rows=call_user_func([$this->spaceClass,'search'],$request);
        }
        // $rows->select('bravo_spaces.title', 'bravo_spaces.slug', 'bravo_spaces.address', 'bravo_spaces.image_id', 'bravo_spaces.banner_image_id', 'bravo_spaces.map_lat', 'bravo_spaces.map_lng', 'bravo_spaces.map_zoom', 'bravo_spaces.price', 'bravo_spaces.sale_price', 'bravo_spaces.review_score', 'bravo_spaces.location_id');
        $rows=$rows->paginate($request->per_page ?? 10);
        $total = $rows->total();
      
        return $this->sendSuccess(
            [
                'total' => $total,
                'total_pages' => $rows->lastPage(),
                'data' => $rows->map(function ($row) {
                    return $row->dataForApi();
                }),
            ]
        );

      }



    
        //    return $data->dataForApi();
    }
    
    public function detail(Request $request, $slug)
    {
        $row = $this->spaceClass::where('slug', $slug)->with(['location','translation','hasWishList'])->first();
        if ( empty($row) or !$row->hasPermissionDetailView()) {
            return redirect('/');
        }
        $translation = $row->translate();
        $space_related = [];
        $location_id = $row->location_id;
        if (!empty($location_id)) {
            $space_related = $this->spaceClass::where('location_id', $location_id)->where("status", "publish")->take(4)->whereNotIn('id', [$row->id])->with(['location','translation','hasWishList'])->get();
        }
        $review_list = $row->getReviewList();
        $data = [
            'row'          => $row,
            'translation'       => $translation,
            'space_related' => $space_related,
            'location_category'=>$this->locationCategoryClass::where("status", "publish")->with('location_category_translations')->get(),
            'booking_data' => $row->getBookingData(),
            'review_list'  => $review_list,
            'seo_meta'  => $row->getSeoMetaWithTranslation(app()->getLocale(),$translation),
            'body_class'=>'is_single',
            'breadcrumbs'       => [
                [
                    'name'  => __('Space'),
                    'url'  => route('space.search'),
                ],
            ],
        ];
        $data['breadcrumbs'] = array_merge($data['breadcrumbs'],$row->locationBreadcrumbs());
        $data['breadcrumbs'][] = [
            'name'  => $translation->title,
            'class' => 'active'
        ];
        $this->setActiveMenu($row);
        return $row->dataForApi(true);
    }
    
    public function terms_list()
    {
        return response()->json(['data'=>Attributes::where('service', 'space')->orderBy("position","desc")->with(['terms','translation'])->get()]);
    }
}
